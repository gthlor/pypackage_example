{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pypackage_example","text":"<p>Just an example of how to create a py package</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://gthlor.github.io/pypackage_example</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#pypackage_example.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>pypackage_example/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/gthlor/pypackage_example/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pypackage_example could always use more documentation, whether as part of the official pypackage_example docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/gthlor/pypackage_example/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up pypackage_example for local development.</p> <ol> <li> <p>Fork the pypackage_example repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/pypackage_example.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv pypackage_example\n$ cd pypackage_example/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 pypackage_example tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/gthlor/pypackage_example/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install pypackage_example, run this command in your terminal:</p> <pre><code>pip install pypackage_example\n</code></pre> <p>This is the preferred method to install pypackage_example, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install pypackage_example from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/gthlor/pypackage_example\n</code></pre>"},{"location":"pypackage_example/","title":"pypackage_example module","text":"<p>Main module.</p>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap","title":"<code> LeafletMap            (Map)         </code>","text":"Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>class LeafletMap(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, height=\"400px\", **kwargs):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        basemaps = {\n            \"OpenStreetMap\": ipyleaflet.basemaps.OpenStreetMap.Mapnik,\n            \"CartoDB Positron\": ipyleaflet.basemaps.CartoDB.Positron,\n            \"CartoDB DarkMatter\": ipyleaflet.basemaps.CartoDB.DarkMatter,\n            \"OpenTopoMap\": ipyleaflet.basemaps.OpenTopoMap,\n            \"Esri WorldImagery\": ipyleaflet.basemaps.Esri.WorldImagery,\n        }\n        if basemap in basemaps:\n            tile_layer = ipyleaflet.TileLayer(\n                url=basemaps[basemap][\"url\"],\n                attribution=basemaps[basemap][\"attribution\"],\n            )\n            self.add_layer(tile_layer)\n        else:\n            raise ValueError(\n                f\"Basemap '{basemap}' not recognized. Available options: {list(basemaps.keys())}\"\n            )\n\n    def add_basemap2(self, basemap=\"OpenTopoMap\"):\n\n        try:\n            url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        except:\n            raise ValueError(\n                f\"Basemap '{basemap}' not recognized. Available options: {list(ipyleaflet.basemaps.keys())}\"\n            )\n\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_layer_control(self):\n        layer_control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add(layer_control)\n\n    def add_vector(\n        self,\n        vector_data: Union[str, gpd.GeoDataFrame, dict],\n        name=\"Vector Layer\",\n        zoom_to_layer=True,\n        style=None,\n        hover_style=None,\n    ):\n        \"\"\"\n        Add vector data to the map. Supports file path, GeoDataFrame, or GeoJSON-like dict.\n        \"\"\"\n\n        if isinstance(vector_data, str):\n            gdf = gpd.read_file(vector_data)\n        elif isinstance(vector_data, gpd.GeoDataFrame):\n            gdf = vector_data\n        elif isinstance(vector_data, dict) and \"features\" in vector_data:\n            gdf = gpd.GeoDataFrame.from_features(vector_data[\"features\"])\n        else:\n            raise ValueError(\n                \"vector_data must be a filepath, GeoDataFrame or GeoJSON-like dict\"\n            )\n\n        geojson_data = gdf.__geo_interface__\n\n        # Zoom to layer\n        if zoom_to_layer:\n            minx, miny, maxx, maxy = gdf.total_bounds\n            self.fit_bounds([[miny, minx], [maxy, maxx]])\n\n        # Setting style and hover style\n        if style is None:\n            style = {\"color\": \"blue\", \"fillOpacity\": 0.4}\n\n        if hover_style is None:\n            hover_style = {\"color\": \"red\", \"fillOpacity\": 0.7}\n\n        # Load GeoJSON\n        geo_json = ipyleaflet.GeoJSON(\n            data=geojson_data,\n            name=name,\n            style=style,\n            hover_style=hover_style,\n        )\n        self.add(geo_json)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_vector","title":"<code>add_vector(self, vector_data, name='Vector Layer', zoom_to_layer=True, style=None, hover_style=None)</code>","text":"<p>Add vector data to the map. Supports file path, GeoDataFrame, or GeoJSON-like dict.</p> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_vector(\n    self,\n    vector_data: Union[str, gpd.GeoDataFrame, dict],\n    name=\"Vector Layer\",\n    zoom_to_layer=True,\n    style=None,\n    hover_style=None,\n):\n    \"\"\"\n    Add vector data to the map. Supports file path, GeoDataFrame, or GeoJSON-like dict.\n    \"\"\"\n\n    if isinstance(vector_data, str):\n        gdf = gpd.read_file(vector_data)\n    elif isinstance(vector_data, gpd.GeoDataFrame):\n        gdf = vector_data\n    elif isinstance(vector_data, dict) and \"features\" in vector_data:\n        gdf = gpd.GeoDataFrame.from_features(vector_data[\"features\"])\n    else:\n        raise ValueError(\n            \"vector_data must be a filepath, GeoDataFrame or GeoJSON-like dict\"\n        )\n\n    geojson_data = gdf.__geo_interface__\n\n    # Zoom to layer\n    if zoom_to_layer:\n        minx, miny, maxx, maxy = gdf.total_bounds\n        self.fit_bounds([[miny, minx], [maxy, maxx]])\n\n    # Setting style and hover style\n    if style is None:\n        style = {\"color\": \"blue\", \"fillOpacity\": 0.4}\n\n    if hover_style is None:\n        hover_style = {\"color\": \"red\", \"fillOpacity\": 0.7}\n\n    # Load GeoJSON\n    geo_json = ipyleaflet.GeoJSON(\n        data=geojson_data,\n        name=name,\n        style=style,\n        hover_style=hover_style,\n    )\n    self.add(geo_json)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use pypackage_example in a project:</p> <pre><code>import pypackage_example\n</code></pre>"},{"location":"examples/01_folium/","title":"01 folium","text":"In\u00a0[1]: Copied! <pre>import pypackage_example\nimport ipyleaflet\nimport geopandas as gpd\n</pre> import pypackage_example import ipyleaflet import geopandas as gpd In\u00a0[2]: Copied! <pre>m = pypackage_example.LeafletMap()\n# m.add_basemap2(basemap=\"Esri.WorldImagery\")\nm\n</pre> m = pypackage_example.LeafletMap() # m.add_basemap2(basemap=\"Esri.WorldImagery\") m Out[2]: In\u00a0[3]: Copied! <pre># basemap = \"OpenStreetMap.Mapnik\"\n# eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n</pre> # basemap = \"OpenStreetMap.Mapnik\" # eval(f\"ipyleaflet.basemaps.{basemap}\").build_url() In\u00a0[4]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\"\nurl = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.gpkg\"\n# url = 'https://github.com/opengeos/datasets/releases/download/us/us_regions.gpkg'\n# data = {\n#   \"type\": \"FeatureCollection\",\n#   \"features\": [\n#     {\n#       \"type\": \"Feature\",\n#       \"properties\": {},\n#       \"geometry\": {\n#         \"coordinates\": [\n#           12.440926583664009,\n#           41.923674241223694\n#         ],\n#         \"type\": \"Point\"\n#       }\n#     }\n#   ]\n# }\nurl = r\"C:\\Users\\loren\\Downloads\\us_counties\\us_counties.shp\"\n# url = r\"C:\\Users\\loren\\Desktop\\xf_paper\\area_bianca_background.gpkg\"\nurl = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.zip\"\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\" url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.gpkg\" # url = 'https://github.com/opengeos/datasets/releases/download/us/us_regions.gpkg' # data = { #   \"type\": \"FeatureCollection\", #   \"features\": [ #     { #       \"type\": \"Feature\", #       \"properties\": {}, #       \"geometry\": { #         \"coordinates\": [ #           12.440926583664009, #           41.923674241223694 #         ], #         \"type\": \"Point\" #       } #     } #   ] # } url = r\"C:\\Users\\loren\\Downloads\\us_counties\\us_counties.shp\" # url = r\"C:\\Users\\loren\\Desktop\\xf_paper\\area_bianca_background.gpkg\" url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.zip\" In\u00a0[5]: Copied! <pre>gdf = gpd.read_file(url)\ngdf.explore()\n</pre> gdf = gpd.read_file(url) gdf.explore() Out[5]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[6]: Copied! <pre>m = pypackage_example.LeafletMap()\nm.add_vector(\n    url,\n    name=\"My Points\",\n    zoom_to_layer=True,\n    style={\"color\": \"green\", \"fillOpacity\": 0.6},\n)\nm.add_layer_control()\nm\n</pre> m = pypackage_example.LeafletMap() m.add_vector(     url,     name=\"My Points\",     zoom_to_layer=True,     style={\"color\": \"green\", \"fillOpacity\": 0.6}, ) m.add_layer_control() m Out[6]: In\u00a0[7]: Copied! <pre>import pypackage_example.foliumap as flp\n\nm2 = flp.FoliumMap()\nm2.add_vector(url)\nm2.add_layer_control()\nm2\n</pre> import pypackage_example.foliumap as flp  m2 = flp.FoliumMap() m2.add_vector(url) m2.add_layer_control() m2 Out[7]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/01_folium/#testing-custom-folium-and-ipyleaflet-classes","title":"Testing Custom Folium and Ipyleaflet classes\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>from pypackage_example import common\n</pre> from pypackage_example import common In\u00a0[2]: Copied! <pre>common.hello_world()\n</pre> common.hello_world() <pre>Hello World!\n</pre>"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""}]}