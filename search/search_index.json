{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pypackage_example","text":"<p>Just an example of how to create a py package</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://gthlor.github.io/pypackage_example</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#pypackage_example.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>pypackage_example/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/gthlor/pypackage_example/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>pypackage_example could always use more documentation, whether as part of the official pypackage_example docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/gthlor/pypackage_example/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up pypackage_example for local development.</p> <ol> <li> <p>Fork the pypackage_example repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/pypackage_example.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv pypackage_example\n$ cd pypackage_example/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 pypackage_example tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/gthlor/pypackage_example/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install pypackage_example, run this command in your terminal:</p> <pre><code>pip install pypackage_example\n</code></pre> <p>This is the preferred method to install pypackage_example, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install pypackage_example from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/gthlor/pypackage_example\n</code></pre>"},{"location":"pypackage_example/","title":"pypackage_example module","text":"<p>Main module.</p>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap","title":"<code> LeafletMap            (Map)         </code>","text":"<p>Custom Leaflet map class based on ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Initial map center as [lat, lon]. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Initial zoom level. Defaults to 2.</p> <code>2</code> <code>height</code> <code>str</code> <p>Map height in pixels or CSS units. Defaults to \"400px\".</p> <code>'400px'</code> <code>**kwargs</code> <p>Additional keyword arguments passed to ipyleaflet.Map.</p> <code>{}</code> <p>Attributes:</p> Name Type Description <code>layout</code> <code>ipywidgets.Layout</code> <p>Layout object for map sizing.</p> <code>scroll_wheel_zoom</code> <code>bool</code> <p>Enables scroll wheel zooming.</p> <p>Methods</p> <p>add_basemap(basemap=\"OpenStreetMap\"):     Adds a basemap layer from predefined options.</p> <p>add_basemap2(basemap=\"OpenTopoMap\"):     Adds a basemap layer using dynamic basemap string.</p> <p>add_layer_control():     Adds a layer control widget to the map.</p> <p>add_vector(vector_data, name=\"Vector Layer\", zoom_to_layer=True, style=None, hover_style=None):     Adds vector data to the map from file path, GeoDataFrame, or GeoJSON-like dict.</p> <pre><code>!!! args\n    vector_data (str | geopandas.GeoDataFrame | dict): Vector data source.\n    name (str, optional): Layer name. Defaults to \"Vector Layer\".\n    zoom_to_layer (bool, optional): Zooms to vector bounds. Defaults to True.\n    style (dict, optional): Style for vector features. Defaults to None.\n    hover_style (dict, optional): Hover style for vector features. Defaults to None.\n\n!!! raises\n    ValueError: If vector_data type is not supported.\n</code></pre> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>class LeafletMap(ipyleaflet.Map):\n    \"\"\"Custom Leaflet map class based on ipyleaflet.Map.\n\n    Args:\n        center (list, optional): Initial map center as [lat, lon]. Defaults to [20, 0].\n        zoom (int, optional): Initial zoom level. Defaults to 2.\n        height (str, optional): Map height in pixels or CSS units. Defaults to \"400px\".\n        **kwargs: Additional keyword arguments passed to ipyleaflet.Map.\n\n    Attributes:\n        layout (ipywidgets.Layout): Layout object for map sizing.\n        scroll_wheel_zoom (bool): Enables scroll wheel zooming.\n\n    Methods:\n        add_basemap(basemap=\"OpenStreetMap\"):\n            Adds a basemap layer from predefined options.\n\n        add_basemap2(basemap=\"OpenTopoMap\"):\n            Adds a basemap layer using dynamic basemap string.\n\n        add_layer_control():\n            Adds a layer control widget to the map.\n\n        add_vector(vector_data, name=\"Vector Layer\", zoom_to_layer=True, style=None, hover_style=None):\n            Adds vector data to the map from file path, GeoDataFrame, or GeoJSON-like dict.\n\n            Args:\n                vector_data (str | geopandas.GeoDataFrame | dict): Vector data source.\n                name (str, optional): Layer name. Defaults to \"Vector Layer\".\n                zoom_to_layer (bool, optional): Zooms to vector bounds. Defaults to True.\n                style (dict, optional): Style for vector features. Defaults to None.\n                hover_style (dict, optional): Hover style for vector features. Defaults to None.\n\n            Raises:\n                ValueError: If vector_data type is not supported.\n    \"\"\"\n\n    def __init__(self, center=[20, 0], zoom=2, height=\"400px\", **kwargs):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.layout.height = height\n        self.scroll_wheel_zoom = True\n\n    def add_basemap(self, basemap=\"OpenStreetMap\"):\n        \"\"\"Adds a basemap layer from predefined options.\n\n        Args:\n            basemap (str, optional): Name of the basemap to add.\n                Options are \"OpenStreetMap\", \"CartoDB Positron\", \"CartoDB DarkMatter\",\n                \"OpenTopoMap\", \"Esri WorldImagery\". Defaults to \"OpenStreetMap\".\n\n        Raises:\n            ValueError: If the basemap name is not recognized.\n        \"\"\"\n        basemaps = {\n            \"OpenStreetMap\": ipyleaflet.basemaps.OpenStreetMap.Mapnik,\n            \"CartoDB Positron\": ipyleaflet.basemaps.CartoDB.Positron,\n            \"CartoDB DarkMatter\": ipyleaflet.basemaps.CartoDB.DarkMatter,\n            \"OpenTopoMap\": ipyleaflet.basemaps.OpenTopoMap,\n            \"Esri WorldImagery\": ipyleaflet.basemaps.Esri.WorldImagery,\n        }\n        if basemap in basemaps:\n            tile_layer = ipyleaflet.TileLayer(\n                url=basemaps[basemap][\"url\"],\n                attribution=basemaps[basemap][\"attribution\"],\n            )\n            self.add_layer(tile_layer)\n        else:\n            raise ValueError(\n                f\"Basemap '{basemap}' not recognized. Available options: {list(basemaps.keys())}\"\n            )\n\n    def add_basemap2(self, basemap=\"OpenTopoMap\"):\n        \"\"\"Adds a basemap layer using a dynamic basemap string.\n\n        Args:\n            basemap (str, optional): Name of the basemap to add. Should match an attribute in ipyleaflet.basemaps.\n                Defaults to \"OpenTopoMap\".\n\n        Raises:\n            ValueError: If the basemap name is not recognized.\n        \"\"\"\n\n        try:\n            url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n        except:\n            raise ValueError(\n                f\"Basemap '{basemap}' not recognized. Available options: {list(ipyleaflet.basemaps.keys())}\"\n            )\n\n        layer = ipyleaflet.TileLayer(url=url, name=basemap)\n        self.add(layer)\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control widget to the map.\n\n        This allows toggling visibility of layers on the map.\n        \"\"\"\n        layer_control = ipyleaflet.LayersControl(position=\"topright\")\n        self.add(layer_control)\n\n    def add_vector(\n        self,\n        vector_data: Union[str, gpd.GeoDataFrame, dict],\n        name=\"Vector Layer\",\n        zoom_to_layer=True,\n        style=None,\n        hover_style=None,\n        **kwargs,\n    ):\n        \"\"\"Adds vector data to the map from file path, GeoDataFrame, or GeoJSON-like dict.\n\n        Args:\n            vector_data (str | geopandas.GeoDataFrame | dict): Vector data source.\n            name (str, optional): Layer name. Defaults to \"Vector Layer\".\n            zoom_to_layer (bool, optional): Zooms to vector bounds. Defaults to True.\n            style (dict, optional): Style for vector features. Defaults to None.\n            hover_style (dict, optional): Hover style for vector features. Defaults to None.\n\n        Raises:\n            ValueError: If vector_data type is not supported.\n        \"\"\"\n\n        if isinstance(vector_data, str):\n            gdf = gpd.read_file(vector_data)\n        elif isinstance(vector_data, gpd.GeoDataFrame):\n            gdf = vector_data\n        elif isinstance(vector_data, dict) and \"features\" in vector_data:\n            gdf = gpd.GeoDataFrame.from_features(vector_data[\"features\"])\n        else:\n            raise ValueError(\n                \"vector_data must be a filepath, GeoDataFrame or GeoJSON-like dict\"\n            )\n\n        geojson_data = gdf.__geo_interface__\n\n        # Zoom to layer\n        if zoom_to_layer:\n            minx, miny, maxx, maxy = gdf.total_bounds\n            self.fit_bounds([[miny, minx], [maxy, maxx]])\n\n        # Setting style and hover style\n        if style is None:\n            style = {\"color\": \"blue\", \"fillOpacity\": 0.4}\n\n        if hover_style is None:\n            hover_style = {\"color\": \"red\", \"fillOpacity\": 0.7}\n\n        # Load GeoJSON\n        geo_json = ipyleaflet.GeoJSON(\n            data=geojson_data, name=name, style=style, hover_style=hover_style, **kwargs\n        )\n        self.add(geo_json)\n\n    def add_raster(self, raster_data: str, **kwards) -&gt; None:\n        \"\"\"Add raster data to the map using localtileserver.\n\n        Args:\n            raster_data (str): path to the raster file.\n        \"\"\"\n        from localtileserver import TileClient, get_leaflet_tile_layer\n\n        tc = TileClient(raster_data)\n        tile_layer = get_leaflet_tile_layer(tc, **kwards)\n        self.add(tile_layer)\n        self.center = tc.center()\n        self.zoom = tc.default_zoom\n\n    def add_staticImage(self, image_path: str, bounds: list = None, **kwargs) -&gt; None:\n        \"\"\"Add a static image to the map.\n\n        Args:\n            image_path (str): path to the image file.\n            bounds (list): bounds of the image in [[south, west], [north, east]] format.\n        \"\"\"\n        # if not os.path.isfile(image_path):\n        #     raise ValueError(f\"Image file '{image_path}' does not exist.\")\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n\n        image_layer = ipyleaflet.ImageOverlay(url=image_path, bounds=bounds, **kwargs)\n\n        self.add(image_layer)\n        self.fit_bounds(bounds)\n\n    def add_video(self, video_path: str, bounds: list = None, **kwargs) -&gt; None:\n        \"\"\"Add a video to the map.\n\n        Args:\n            video_path (str): path to the video file.\n            bounds (list): bounds of the video in [[south, west], [north, east]] format.\n        \"\"\"\n        # if not os.path.isfile(video_path):\n        #     raise ValueError(f\"Video file '{video_path}' does not exist.\")\n\n        if bounds is None:\n            bounds = [[-90, -180], [90, 180]]\n\n        video_layer = ipyleaflet.VideoOverlay(url=video_path, bounds=bounds, **kwargs)\n\n        self.add(video_layer)\n        self.fit_bounds(bounds)\n\n    def add_webservice(\n        self, url: str, lyr_name: str = \"WMS Layer\", transparent=True, **kwargs\n    ) -&gt; None:\n        \"\"\"Add a web service layer to the map.\n\n        Args:\n            url (str): URL of the web service.\n            name (str, optional): Name of the layer. Defaults to \"WMS Layer\".\n            **kwargs: Additional keyword arguments passed to the WMSLayer.\n        \"\"\"\n        wms_layer = ipyleaflet.WMSLayer(\n            url=url, layers=lyr_name, transparent=transparent, **kwargs\n        )\n        self.add(wms_layer)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_basemap","title":"<code>add_basemap(self, basemap='OpenStreetMap')</code>","text":"<p>Adds a basemap layer from predefined options.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap to add. Options are \"OpenStreetMap\", \"CartoDB Positron\", \"CartoDB DarkMatter\", \"OpenTopoMap\", \"Esri WorldImagery\". Defaults to \"OpenStreetMap\".</p> <code>'OpenStreetMap'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the basemap name is not recognized.</p> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_basemap(self, basemap=\"OpenStreetMap\"):\n    \"\"\"Adds a basemap layer from predefined options.\n\n    Args:\n        basemap (str, optional): Name of the basemap to add.\n            Options are \"OpenStreetMap\", \"CartoDB Positron\", \"CartoDB DarkMatter\",\n            \"OpenTopoMap\", \"Esri WorldImagery\". Defaults to \"OpenStreetMap\".\n\n    Raises:\n        ValueError: If the basemap name is not recognized.\n    \"\"\"\n    basemaps = {\n        \"OpenStreetMap\": ipyleaflet.basemaps.OpenStreetMap.Mapnik,\n        \"CartoDB Positron\": ipyleaflet.basemaps.CartoDB.Positron,\n        \"CartoDB DarkMatter\": ipyleaflet.basemaps.CartoDB.DarkMatter,\n        \"OpenTopoMap\": ipyleaflet.basemaps.OpenTopoMap,\n        \"Esri WorldImagery\": ipyleaflet.basemaps.Esri.WorldImagery,\n    }\n    if basemap in basemaps:\n        tile_layer = ipyleaflet.TileLayer(\n            url=basemaps[basemap][\"url\"],\n            attribution=basemaps[basemap][\"attribution\"],\n        )\n        self.add_layer(tile_layer)\n    else:\n        raise ValueError(\n            f\"Basemap '{basemap}' not recognized. Available options: {list(basemaps.keys())}\"\n        )\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_basemap2","title":"<code>add_basemap2(self, basemap='OpenTopoMap')</code>","text":"<p>Adds a basemap layer using a dynamic basemap string.</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>Name of the basemap to add. Should match an attribute in ipyleaflet.basemaps. Defaults to \"OpenTopoMap\".</p> <code>'OpenTopoMap'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the basemap name is not recognized.</p> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_basemap2(self, basemap=\"OpenTopoMap\"):\n    \"\"\"Adds a basemap layer using a dynamic basemap string.\n\n    Args:\n        basemap (str, optional): Name of the basemap to add. Should match an attribute in ipyleaflet.basemaps.\n            Defaults to \"OpenTopoMap\".\n\n    Raises:\n        ValueError: If the basemap name is not recognized.\n    \"\"\"\n\n    try:\n        url = eval(f\"ipyleaflet.basemaps.{basemap}\").build_url()\n    except:\n        raise ValueError(\n            f\"Basemap '{basemap}' not recognized. Available options: {list(ipyleaflet.basemaps.keys())}\"\n        )\n\n    layer = ipyleaflet.TileLayer(url=url, name=basemap)\n    self.add(layer)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control widget to the map.</p> <p>This allows toggling visibility of layers on the map.</p> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control widget to the map.\n\n    This allows toggling visibility of layers on the map.\n    \"\"\"\n    layer_control = ipyleaflet.LayersControl(position=\"topright\")\n    self.add(layer_control)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_raster","title":"<code>add_raster(self, raster_data, **kwards)</code>","text":"<p>Add raster data to the map using localtileserver.</p> <p>Parameters:</p> Name Type Description Default <code>raster_data</code> <code>str</code> <p>path to the raster file.</p> required Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_raster(self, raster_data: str, **kwards) -&gt; None:\n    \"\"\"Add raster data to the map using localtileserver.\n\n    Args:\n        raster_data (str): path to the raster file.\n    \"\"\"\n    from localtileserver import TileClient, get_leaflet_tile_layer\n\n    tc = TileClient(raster_data)\n    tile_layer = get_leaflet_tile_layer(tc, **kwards)\n    self.add(tile_layer)\n    self.center = tc.center()\n    self.zoom = tc.default_zoom\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_staticImage","title":"<code>add_staticImage(self, image_path, bounds=None, **kwargs)</code>","text":"<p>Add a static image to the map.</p> <p>Parameters:</p> Name Type Description Default <code>image_path</code> <code>str</code> <p>path to the image file.</p> required <code>bounds</code> <code>list</code> <p>bounds of the image in [[south, west], [north, east]] format.</p> <code>None</code> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_staticImage(self, image_path: str, bounds: list = None, **kwargs) -&gt; None:\n    \"\"\"Add a static image to the map.\n\n    Args:\n        image_path (str): path to the image file.\n        bounds (list): bounds of the image in [[south, west], [north, east]] format.\n    \"\"\"\n    # if not os.path.isfile(image_path):\n    #     raise ValueError(f\"Image file '{image_path}' does not exist.\")\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n\n    image_layer = ipyleaflet.ImageOverlay(url=image_path, bounds=bounds, **kwargs)\n\n    self.add(image_layer)\n    self.fit_bounds(bounds)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_vector","title":"<code>add_vector(self, vector_data, name='Vector Layer', zoom_to_layer=True, style=None, hover_style=None, **kwargs)</code>","text":"<p>Adds vector data to the map from file path, GeoDataFrame, or GeoJSON-like dict.</p> <p>Parameters:</p> Name Type Description Default <code>vector_data</code> <code>str | geopandas.GeoDataFrame | dict</code> <p>Vector data source.</p> required <code>name</code> <code>str</code> <p>Layer name. Defaults to \"Vector Layer\".</p> <code>'Vector Layer'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Zooms to vector bounds. Defaults to True.</p> <code>True</code> <code>style</code> <code>dict</code> <p>Style for vector features. Defaults to None.</p> <code>None</code> <code>hover_style</code> <code>dict</code> <p>Hover style for vector features. Defaults to None.</p> <code>None</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If vector_data type is not supported.</p> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_vector(\n    self,\n    vector_data: Union[str, gpd.GeoDataFrame, dict],\n    name=\"Vector Layer\",\n    zoom_to_layer=True,\n    style=None,\n    hover_style=None,\n    **kwargs,\n):\n    \"\"\"Adds vector data to the map from file path, GeoDataFrame, or GeoJSON-like dict.\n\n    Args:\n        vector_data (str | geopandas.GeoDataFrame | dict): Vector data source.\n        name (str, optional): Layer name. Defaults to \"Vector Layer\".\n        zoom_to_layer (bool, optional): Zooms to vector bounds. Defaults to True.\n        style (dict, optional): Style for vector features. Defaults to None.\n        hover_style (dict, optional): Hover style for vector features. Defaults to None.\n\n    Raises:\n        ValueError: If vector_data type is not supported.\n    \"\"\"\n\n    if isinstance(vector_data, str):\n        gdf = gpd.read_file(vector_data)\n    elif isinstance(vector_data, gpd.GeoDataFrame):\n        gdf = vector_data\n    elif isinstance(vector_data, dict) and \"features\" in vector_data:\n        gdf = gpd.GeoDataFrame.from_features(vector_data[\"features\"])\n    else:\n        raise ValueError(\n            \"vector_data must be a filepath, GeoDataFrame or GeoJSON-like dict\"\n        )\n\n    geojson_data = gdf.__geo_interface__\n\n    # Zoom to layer\n    if zoom_to_layer:\n        minx, miny, maxx, maxy = gdf.total_bounds\n        self.fit_bounds([[miny, minx], [maxy, maxx]])\n\n    # Setting style and hover style\n    if style is None:\n        style = {\"color\": \"blue\", \"fillOpacity\": 0.4}\n\n    if hover_style is None:\n        hover_style = {\"color\": \"red\", \"fillOpacity\": 0.7}\n\n    # Load GeoJSON\n    geo_json = ipyleaflet.GeoJSON(\n        data=geojson_data, name=name, style=style, hover_style=hover_style, **kwargs\n    )\n    self.add(geo_json)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_video","title":"<code>add_video(self, video_path, bounds=None, **kwargs)</code>","text":"<p>Add a video to the map.</p> <p>Parameters:</p> Name Type Description Default <code>video_path</code> <code>str</code> <p>path to the video file.</p> required <code>bounds</code> <code>list</code> <p>bounds of the video in [[south, west], [north, east]] format.</p> <code>None</code> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_video(self, video_path: str, bounds: list = None, **kwargs) -&gt; None:\n    \"\"\"Add a video to the map.\n\n    Args:\n        video_path (str): path to the video file.\n        bounds (list): bounds of the video in [[south, west], [north, east]] format.\n    \"\"\"\n    # if not os.path.isfile(video_path):\n    #     raise ValueError(f\"Video file '{video_path}' does not exist.\")\n\n    if bounds is None:\n        bounds = [[-90, -180], [90, 180]]\n\n    video_layer = ipyleaflet.VideoOverlay(url=video_path, bounds=bounds, **kwargs)\n\n    self.add(video_layer)\n    self.fit_bounds(bounds)\n</code></pre>"},{"location":"pypackage_example/#pypackage_example.pypackage_example.LeafletMap.add_webservice","title":"<code>add_webservice(self, url, lyr_name='WMS Layer', transparent=True, **kwargs)</code>","text":"<p>Add a web service layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the web service.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to \"WMS Layer\".</p> required <code>**kwargs</code> <p>Additional keyword arguments passed to the WMSLayer.</p> <code>{}</code> Source code in <code>pypackage_example/pypackage_example.py</code> <pre><code>def add_webservice(\n    self, url: str, lyr_name: str = \"WMS Layer\", transparent=True, **kwargs\n) -&gt; None:\n    \"\"\"Add a web service layer to the map.\n\n    Args:\n        url (str): URL of the web service.\n        name (str, optional): Name of the layer. Defaults to \"WMS Layer\".\n        **kwargs: Additional keyword arguments passed to the WMSLayer.\n    \"\"\"\n    wms_layer = ipyleaflet.WMSLayer(\n        url=url, layers=lyr_name, transparent=transparent, **kwargs\n    )\n    self.add(wms_layer)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use pypackage_example in a project:</p> <pre><code>import pypackage_example\n</code></pre>"},{"location":"examples/01_folium/","title":"01 folium","text":"In\u00a0[1]: Copied! <pre>#!pip install pypackage_example\n</pre> #!pip install pypackage_example In\u00a0[2]: Copied! <pre># import my custom package and modules\n\nimport pypackage_example as pl\nimport pypackage_example.foliumap as flp\n\n# import folium\n# import ipyleaflet\n# import geopandas as gpd\n</pre> # import my custom package and modules  import pypackage_example as pl import pypackage_example.foliumap as flp  # import folium # import ipyleaflet # import geopandas as gpd In\u00a0[3]: Copied! <pre>m = pl.LeafletMap()\nm.add_basemap2(basemap=\"Esri.WorldImagery\")\nm\n</pre> m = pl.LeafletMap() m.add_basemap2(basemap=\"Esri.WorldImagery\") m Out[3]: In\u00a0[4]: Copied! <pre># just a list of URLs to try\n\n# url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\"\n# url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.gpkg\"\n# url = 'https://github.com/opengeos/datasets/releases/download/us/us_regions.gpkg'\n# url = r\"C:\\Users\\loren\\Downloads\\us_counties\\us_counties.shp\"        # this won't work because it's in my local machine\n# url = r\"C:\\Users\\loren\\Desktop\\xf_paper\\area_bianca_background.gpkg\" # this won't work because it's in my local machine\nurl = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.zip\"\n</pre> # just a list of URLs to try  # url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.geojson\" # url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.gpkg\" # url = 'https://github.com/opengeos/datasets/releases/download/us/us_regions.gpkg' # url = r\"C:\\Users\\loren\\Downloads\\us_counties\\us_counties.shp\"        # this won't work because it's in my local machine # url = r\"C:\\Users\\loren\\Desktop\\xf_paper\\area_bianca_background.gpkg\" # this won't work because it's in my local machine url = \"https://github.com/opengeos/datasets/releases/download/us/us_southeast.zip\" In\u00a0[5]: Copied! <pre>m = pl.LeafletMap()\nm.add_vector(\n    url,\n    name=\"Countries\",\n    zoom_to_layer=True,\n    style={\"color\": \"green\", \"fillOpacity\": 0.6},\n)\nm.add_layer_control()\nm\n</pre> m = pl.LeafletMap() m.add_vector(     url,     name=\"Countries\",     zoom_to_layer=True,     style={\"color\": \"green\", \"fillOpacity\": 0.6}, ) m.add_layer_control() m Out[5]: In\u00a0[6]: Copied! <pre>raster = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_30m.tif\"\nraster = \"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\"\nm_withR = pl.LeafletMap()\nm_withR.add_raster(raster)\nm_withR\n</pre> raster = \"https://github.com/opengeos/datasets/releases/download/raster/LC09_039035_20240708_30m.tif\" raster = \"https://github.com/opengeos/datasets/releases/download/raster/landsat7.tif\" m_withR = pl.LeafletMap() m_withR.add_raster(raster) m_withR Out[6]: In\u00a0[7]: Copied! <pre>static_image = \"https://th.bing.com/th/id/R.81a6e74c8adbf7f55406e8c4b80669d5?rik=HqvY9afbb1CD8g&amp;pid=ImgRaw&amp;r=0\"\ngif = \"https://i.gifer.com/4j.gif\"\nm_withR = pl.LeafletMap()\nm_withR.add_staticImage(gif, bounds=[[37, -123], [38, -121]], name=\"gif\")\nm_withR\n</pre> static_image = \"https://th.bing.com/th/id/R.81a6e74c8adbf7f55406e8c4b80669d5?rik=HqvY9afbb1CD8g&amp;pid=ImgRaw&amp;r=0\" gif = \"https://i.gifer.com/4j.gif\" m_withR = pl.LeafletMap() m_withR.add_staticImage(gif, bounds=[[37, -123], [38, -121]], name=\"gif\") m_withR Out[7]: In\u00a0[8]: Copied! <pre>map = pl.LeafletMap()\nmap.add_video(\n    \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\",\n    bounds=[[37.56238816, -122.515963], [37.563391708, -122.5130939]],\n)\nmap\n</pre> map = pl.LeafletMap() map.add_video(     \"https://static-assets.mapbox.com/mapbox-gl-js/drone.mp4\",     bounds=[[37.56238816, -122.515963], [37.563391708, -122.5130939]], ) map Out[8]: In\u00a0[9]: Copied! <pre>map = pl.LeafletMap()\nmap.add_webservice(\n    url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\",\n    name=\"USGSNAIPPlus:NaturalColor\",\n    format=\"image/png\",\n    transparent=True,\n)\nmap.add_layer_control()\nmap\n</pre> map = pl.LeafletMap() map.add_webservice(     url=\"https://imagery.nationalmap.gov/arcgis/services/USGSNAIPPlus/ImageServer/WMSServer?\",     name=\"USGSNAIPPlus:NaturalColor\",     format=\"image/png\",     transparent=True, ) map.add_layer_control() map Out[9]: In\u00a0[10]: Copied! <pre>m2 = flp.FoliumMap()\nm2.add_vector(url)\nm2.add_layer_control()\nm2\n</pre> m2 = flp.FoliumMap() m2.add_vector(url) m2.add_layer_control() m2 Out[10]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[11]: Copied! <pre>m3 = flp.FoliumMap()\nm3.add_vector(url)\nm3.add_split_map(left_layer=\"OpenStreetMap\", right_layer=\"ESRI.WorldImagery\")\nm3\n</pre> m3 = flp.FoliumMap() m3.add_vector(url) m3.add_split_map(left_layer=\"OpenStreetMap\", right_layer=\"ESRI.WorldImagery\") m3 Out[11]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/01_folium/#testing-custom-folium-and-ipyleaflet-classes","title":"Testing Custom Folium and Ipyleaflet classes\u00b6","text":""},{"location":"examples/01_folium/#testing-pypackage_example-built-on-ipyleaflet","title":"Testing pypackage_example (built on ipyleaflet)\u00b6","text":""},{"location":"examples/01_folium/#add-vector-layer-from-url","title":"add vector layer from URL\u00b6","text":""},{"location":"examples/01_folium/#add-raster-layers","title":"add raster layers\u00b6","text":""},{"location":"examples/01_folium/#testing-pypackage_examplefolium-built-on-folium","title":"Testing pypackage_example.folium (built on folium)\u00b6","text":""},{"location":"examples/01_folium/#add-vector-and-layer-control-panel","title":"add vector and layer control panel\u00b6","text":""},{"location":"examples/01_folium/#adding-a-split-map","title":"adding a split map\u00b6","text":""},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print(\"Hello World!\")\n</pre> print(\"Hello World!\") <pre>Hello World!\n</pre>"},{"location":"examples/map/","title":"Map","text":"In\u00a0[1]: Copied! <pre>from pypackage_example import common\n</pre> from pypackage_example import common In\u00a0[2]: Copied! <pre>common.hello_world()\n</pre> common.hello_world() <pre>Hello World!\n</pre>"},{"location":"examples/map/#create-interactive-maps","title":"Create interactive maps\u00b6","text":""}]}